openapi: 3.0.3
info:
  title: Ecommerce REST API
  description: |-
    -REST API de ecommerce desenvolvida em node JS como treinamento.
    postada na plataforma ngrok

   
    Links uteis:
    - [Repositorio da REST API Ecommerce](https://github.com/mayque731/REST)
    - [Projeto original de Fernando Silva Maransatto](https://github.com/Maransatto/rest-api-node-js)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://ecommerce.swagger.io/api/v1
tags:
  - name: usuarios
    description: Cadastro e login de usuarios
    externalDocs:
      description: Saiba mais
      url: https://github.com/mayque731/REST
  - name: categorias
    description: Listagem e cadastro de categorias
    externalDocs:
      description: Saiba mais
      url: https://github.com/mayque731/REST
  - name: produtos
    description: operações quanto a produtos
    externalDocs:
      description: Saiba mais
      url: https://github.com/mayque731/REST
  - name: pedidos
    description: operações quanto a pedidos
    externalDocs:
      description: Saiba mais
      url: https://github.com/mayque731/REST
paths:
  /usuarios/cadastro:
    
    post:
      tags:
        - usuarios
      summary: Cadastra um novo usuario
      description: Recebe email e senha
      operationId: addUsuario
      parameters:
        - name: email
          in: query
          description: O email criado em cadastro
          required: true
          schema:
            type: string
        - name: senha
          in: query
          description: a senha criada em cadastro
          required: true
          schema:
            type: string
      responses:
        '200':
          description: usuario cadastrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usuarios'          
            application/xml:
              schema:
                $ref: '#/components/schemas/usuarios'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /usuarios/login:
    
    post:
      tags:
        - usuarios
      summary: Loga um usuario ja cadastro
      description: Recebe email e senha
      operationId: logUsuario
      parameters:
        - name: email
          in: query
          description: O email criado em cadastro
          required: true
          schema:
            type: string
        - name: senha
          in: query
          description: a senha criada em cadastro
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usuarios'          
            application/xml:
              schema:
                $ref: '#/components/schemas/usuarios'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets  
  /categorias:
    get:
      tags:
        - categorias
      summary: Retorna todas categorias cadastradas
      description: Multiple status values can be provided with comma separated strings
      operationId: getCategorias
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/categorias'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/categorias'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - categorias
      summary: Cadastra uma categoria
      description: Cadastra uma categoria
      operationId: postCategorias
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/categorias'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/categorias'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets        
  /produtos:
    get:
      tags:
        - produtos
      summary: Retorna todos produtos cadastrados
      description: Retorna todos produtos cadastrados
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/produtos'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/produtos'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - produtos
      summary: Cadastra um produto
      description: Cadastra um produto
      operationId: postProduto
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/produtos'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/produtos'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets        
  /produtos/{id_produto}:
    
    get:
      tags:
        - produtos
      summary: Retorna dados de um unico produto
      description: ''
      operationId: getUmPedido
      parameters:
        - name: id_produto
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - produtos
      summary: Deleta um produto
      description: Deleta um produto
      operationId: deleteProduct
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: id_produto
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    patch:
      tags:
        - produtos
      summary: Atualiza um produto
      description: Atualiza um produto
      operationId: patchProduto
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: id_produto
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets        
  /pedidos:
    get:
      tags:
        - pedidos
      summary: Retorna todos pedidos cadastrados
      description: Retorna todos pedidos cadastrados
      operationId: getPedido
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pedidos'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pedidos'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pedidos
      summary: Cadastra um pedido
      description: Cadastra um pedido
      operationId: postPedido
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pedidos'          
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pedidos'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets        
components:
  schemas:
    usuarios:
      type: object
      properties:
        email:
          type: string
          example: mayque.731@email.com
        senha:
          type: string
          example: senhaforte
      xml:
        name: usuarios
    categorias:
      type: object
      properties:
        nome:
          type: string
          example: item
      xml:
        name: categorias
    produtos:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: produtos
    pedidos:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: pedidos
  requestBodies:
    usuarios:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/usuarios'
        application/xml:
          schema:
            $ref: '#/components/schemas/usuarios'
    caterogias:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/categorias'
        application/xml:
          schema:
            $ref: '#/components/schemas/categorias'
    produtos:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/produtos'
        application/xml:
          schema:
            $ref: '#/components/schemas/produtos'
    pedidos:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/pedidos'
        application/xml:
          schema:
            $ref: '#/components/schemas/pedidos'        
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header